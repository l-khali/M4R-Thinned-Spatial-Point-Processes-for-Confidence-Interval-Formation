for (r in 1:length(radius) ) {
variances <- c(variances, var(as.numeric(bootstrapped_K[r,-1])))
}
return(variances)
}
thinning_sv_04_inhom <- poisson_simulation_thinning_sv(100, 250, 0.4, 0.05, inhomogenous = TRUE)
library(spatstat)
library(hash)
K_var_inhom <- function(intensity, N = 4, B=1000, radius = seq(0.0,0.14,0.01), thinning_param = 1, window = owin(c(0,1),c(0,1))) {
# vars <- data.frame(radius)
p <- rpoispp(intensity, win=window)
if (thinning_param < 1) {
unif <- runif(npoints(p), 0, 1)
p_df <- as.data.frame(p)
subprocess_df <- p_df[which(unif < thinning_param),]
rownames(subprocess_df) <- seq(1, nrow(subprocess_df))
p <- as.ppp(subprocess_df, window)
}
npoints <- npoints(p)
r <- t(as.data.frame(replicate(npoints,radius)))
weights <- edge.Ripley(p,pairdist(p))
a <- 1/N
increment <- 1/sqrt(N)
window <- owin(c(0, increment), c(0,increment))
k_vals <- data.frame(radius)
marks <- as.data.frame(matrix(0, ncol = length(radius), nrow = npoints))
datadf <- as.data.frame(p)
for (point in 1:(nrow(datadf)-1)) {
x1 <- datadf[point,1]
y1 <- datadf[point,2]
for (other_point in (point+1):(nrow(datadf))) {
x2 <- datadf[other_point,1]
y2 <- datadf[other_point,2]
for (radius_index in 1:15) {
current_radius <- seq(0.0, 0.14, 0.01)[radius_index]
if ((x1-x2)**2+(y1-y2)**2 <= current_radius**2) {
marks[point,radius_index:15] <- marks[point,radius_index:15] + rep(weights[point, other_point], each=length(radius_index:15))
marks[other_point,radius_index:15] <- marks[other_point,radius_index:15] + rep(weights[other_point, point], each=length(radius_index:15))
break
}
}
}
}
marks(p) <- marks
# only for N=4 for now
blocks = hash()
block_count <- 0
for (xstart in head(seq(0,1,length.out = sqrt(N) + 1),-1)) {
for (ystart in head(seq(0,1,length.out = sqrt(N) + 1),-1)) {
block_count = block_count +  1
blocks[[as.character(block_count)]] = subset(p, xstart <= x & x < xstart + increment & ystart <= y & y < ystart + increment)
}
}
bootstrapped_K <- data.frame(radius)
for (bootstrap in 1:B) {
current_bootstrap_K <- c()
sampled_blocks <- sample(c(1,2,3,4), 4, replace=TRUE)
current_K <- data.frame(radius)
for (block in sampled_blocks) {
block_k <- c()
for (r in 1:length(radius)) {
block_k <- c(block_k,sum(marks(blocks[[as.character(block)]])[,r]))
}
current_K <- cbind(current_K, block_k)
}
for (r in 1:length(radius)) {
current_bootstrap_K <- c(current_bootstrap_K, sum(current_K[r,-1]))
}
bootstrapped_K <- cbind(bootstrapped_K, current_bootstrap_K)
}
variances <- c()
for (r in 1:length(radius) ) {
variances <- c(variances, var(as.numeric(bootstrapped_K[r,-1])))
}
return(variances)
}
thinning_sv_04_inhom <- poisson_simulation_thinning_sv(100, 250, 0.4, 0.05, inhomogenous = TRUE)
thinning_sv_03_inhom <- poisson_simulation_thinning_sv(100, 250, 0.3, 0.05, inhomogenous = TRUE)
library(spatstat)
library(hash)
K_var_inhom <- function(intensity, N = 4, B=1000, radius = seq(0.0,0.14,0.01), thinning_param = 1, window = owin(c(0,1),c(0,1))) {
# vars <- data.frame(radius)
p <- rpoispp(intensity, win=window)
if (thinning_param < 1) {
unif <- runif(npoints(p), 0, 1)
p_df <- as.data.frame(p)
subprocess_df <- p_df[which(unif < thinning_param),]
rownames(subprocess_df) <- seq(1, nrow(subprocess_df))
p <- as.ppp(subprocess_df, window)
}
npoints <- npoints(p)
r <- t(as.data.frame(replicate(npoints,radius)))
weights <- edge.Ripley(p,pairdist(p))
a <- 1/N
increment <- 1/sqrt(N)
window <- owin(c(0, increment), c(0,increment))
k_vals <- data.frame(radius)
marks <- as.data.frame(matrix(0, ncol = length(radius), nrow = npoints))
datadf <- as.data.frame(p)
for (point in 1:(nrow(datadf)-1)) {
x1 <- datadf[point,1]
y1 <- datadf[point,2]
for (other_point in (point+1):(nrow(datadf))) {
x2 <- datadf[other_point,1]
y2 <- datadf[other_point,2]
for (radius_index in 1:15) {
current_radius <- seq(0.0, 0.14, 0.01)[radius_index]
if ((x1-x2)**2+(y1-y2)**2 <= current_radius**2) {
marks[point,radius_index:15] <- marks[point,radius_index:15] + rep(weights[point, other_point], each=length(radius_index:15))
marks[other_point,radius_index:15] <- marks[other_point,radius_index:15] + rep(weights[other_point, point], each=length(radius_index:15))
break
}
}
}
}
marks(p) <- marks
# only for N=4 for now
blocks = hash()
block_count <- 0
for (xstart in head(seq(0,1,length.out = sqrt(N) + 1),-1)) {
for (ystart in head(seq(0,1,length.out = sqrt(N) + 1),-1)) {
block_count = block_count +  1
blocks[[as.character(block_count)]] = subset(p, xstart <= x & x < xstart + increment & ystart <= y & y < ystart + increment)
}
}
bootstrapped_K <- data.frame(radius)
for (bootstrap in 1:B) {
current_bootstrap_K <- c()
sampled_blocks <- sample(c(1,2,3,4), 4, replace=TRUE)
current_K <- data.frame(radius)
for (block in sampled_blocks) {
block_k <- c()
for (r in 1:length(radius)) {
block_k <- c(block_k,sum(marks(blocks[[as.character(block)]])[,r]))
}
current_K <- cbind(current_K, block_k)
}
for (r in 1:length(radius)) {
current_bootstrap_K <- c(current_bootstrap_K, sum(current_K[r,-1]))
}
bootstrapped_K <- cbind(bootstrapped_K, current_bootstrap_K)
}
variances <- c()
for (r in 1:length(radius) ) {
variances <- c(variances, var(as.numeric(bootstrapped_K[r,-1])))
}
return(variances)
}
library(spatstat)
intensity2 <- function(x, y) {
return(500*x)
}
intensity <- function(x,y) {
return(240 + 20*x)
}
#poisson_simulation_approximation <- function(nsim, lambda, nregions, alpha) {
#   r <- seq(0.0, 0.14, 0.01)
#   K_actual <- rep(c(pi),each=15) * r * r
#   cover <- rep(c(0),each=15)
#   coverage <- cbind(r, cover)
#   for (i in 1:nsim) {
#     print(paste0("Current simulation:",i))
#     data <- rpoispp(lambda)
#     confidences <- approximation_method(data, nregions, alpha)
#     for (j in 1:length(r)) {
#       if (confidences[j,1] <= K_actual[j] & K_actual[j] <= confidences[j,2]) {
#         coverage[j,2] = coverage[j,2] + 1/nsim
#       }
#     }
#   }
#   return(coverage)
# }
#poisson_simulation_approximation2 <- function(nsim, lambda, nregions, alpha) {
#   r <- seq(0.0, 0.14, 0.01)
#   K_actual <- rep(c(pi),each=15) * r * r
#   cover <- rep(c(0),each=15)
#   coverage <- cbind(r, cover)
#   for (i in 1:nsim) {
#     print(paste0("Current simulation:",i))
#     data <- rpoispp(lambda)
#     confidences <- approximation_method_2(data, nregions, alpha)
#     for (j in 1:length(r)) {
#       if (confidences[j,1] <= K_actual[j] & K_actual[j] <= confidences[j,2]) {
#         coverage[j,2] = coverage[j,2] + 1/nsim
#       }
#     }
#   }
#   return(coverage)
# }
poisson_simulation_approximation3 <- function(nsim, lambda, nregions, alpha, inhomogenous = FALSE) {
r <- seq(0.0, 0.14, 0.01)
if (inhomogenous) {
K_actual <- K_actual_inhom()
} else {
K_actual <- rep(c(pi),each=15) * r * r
}
cover <- rep(c(0),each=15)
coverage <- cbind(r, cover)
for (i in 1:nsim) {
print(paste0("Current simulation:",i))
if (inhomogenous) {
data <- rpoispp(intensity2)
}else {
data <- rpoispp(lambda)
}
confidences <- approximation_method_3(data, nregions, alpha)
for (j in 1:length(r)) {
if (confidences[j,1] <= K_actual[j] & K_actual[j] <= confidences[j,2]) {
coverage[j,2] = coverage[j,2] + 1/nsim
}
}
}
return(coverage)
}
poisson_simulation_tiling <- function(nsim, lambda, nregions, alpha, R = 100, inhomogenous = FALSE) {
r <- seq(0.0, 0.14, 0.01)
if (inhomogenous) {
K_actual <- K_actual_inhom()
} else {
K_actual <- rep(c(pi),each=15) * r * r
}
cover <- rep(c(0),each=15)
coverage <- cbind(r, cover)
for (i in 1:nsim) {
print(paste0("Current simulation:",i))
if (inhomogenous) {
data <- rpoispp(intensity2)
}else {
data <- rpoispp(lambda)
}
confidences <- tiling_method(data, nregions, alpha, R)
for (j in 1:length(r)) {
if (confidences[j,1] <= K_actual[j] & K_actual[j] <= confidences[j,2]) {
coverage[j,2] = coverage[j,2] + 1/nsim
}
}
}
return(coverage)
}
#
# poisson_simulation_subsets <- function(nsim, lambda, nregions, alpha, R = 99) {
#   r <- seq(0.0, 0.14, 0.01)
#   K_actual <- rep(c(pi),each=15) * r * r
#   cover <- rep(c(0),each=15)
#   coverage <- cbind(r, cover)
#   for (i in 1:nsim) {
#     print(paste0("Current simulation:",i))
#     data <- rpoispp(lambda)
#     confidences <- subsets_method(data, nregions, alpha, R)
#     for (j in 1:length(r)) {
#       if (confidences[j,1] <= K_actual[j] & K_actual[j] <= confidences[j,2]) {
#         coverage[j,2] = coverage[j,2] + 1/nsim
#       }
#     }
#   }
#   return(coverage)
# }
#
# poisson_simulation_subsets2 <- function(nsim, lambda, nregions, alpha, R = 99) {
#   r <- seq(0.0, 0.14, 0.01)
#   K_actual <- rep(c(pi),each=15) * r * r
#   cover <- rep(c(0),each=15)
#   coverage <- cbind(r, cover)
#   for (i in 1:nsim) {
#     print(paste0("Current simulation:",i))
#     data <- rpoispp(lambda)
#     confidences <- subsets_method2(data, nregions, alpha, R)
#     for (j in 1:length(r)) {
#       if (confidences[j,1] <= K_actual[j] & K_actual[j] <= confidences[j,2]) {
#         coverage[j,2] = coverage[j,2] + 1/nsim
#       }
#     }
#   }
#   return(coverage)
# }
#
# poisson_simulation_subsets3 <- function(nsim, lambda, nregions, alpha, R = 99) {
#   r <- seq(0.0, 0.14, 0.01)
#   K_actual <- rep(c(pi),each=15) * r * r
#   cover <- rep(c(0),each=15)
#   coverage <- cbind(r, cover)
#   for (i in 1:nsim) {
#     print(paste0("Current simulation:",i))
#     data <- rpoispp(lambda)
#     confidences <- subsets_method3(data, nregions, alpha, R)
#     for (j in 1:length(r)) {
#       if (confidences[j,1] <= K_actual[j] & K_actual[j] <= confidences[j,2]) {
#         coverage[j,2] = coverage[j,2] + 1/nsim
#       }
#     }
#   }
#   return(coverage)
# }
#
# poisson_simulation_subsets4 <- function(nsim, lambda, nregions, alpha, R = 99) {
#   r <- seq(0.0, 0.14, 0.01)
#   K_actual <- rep(c(pi),each=15) * r * r
#   cover <- rep(c(0),each=15)
#   coverage <- cbind(r, cover)
#   for (i in 1:nsim) {
#     print(paste0("Current simulation:",i))
#     data <- rpoispp(lambda)
#     confidences <- subsets_method4(data, nregions, alpha, R=R)
#     for (j in 1:length(r)) {
#       if (confidences[j,1] <= K_actual[j] & K_actual[j] <= confidences[j,2]) {
#         coverage[j,2] = coverage[j,2] + 1/nsim
#       }
#     }
#   }
#   return(coverage)
# }
poisson_simulation_subsets5 <- function(nsim, lambda, nregions, alpha, R = 99, inhomogenous = FALSE) {
r <- seq(0.0, 0.14, 0.01)
if (inhomogenous) {
K_actual <- K_actual_inhom()
} else {
K_actual <- rep(c(pi),each=15) * r * r
}
cover <- rep(c(0),each=15)
coverage <- cbind(r, cover)
for (i in 1:nsim) {
print(paste0("Current simulation:",i))
if (inhomogenous) {
data <- rpoispp(intensity2)
}else {
data <- rpoispp(lambda)
}
confidences <- subsets_method5(data, nregions, alpha, R=R)
for (j in 1:length(r)) {
if (confidences[j,1] <= K_actual[j] & K_actual[j] <= confidences[j,2]) {
coverage[j,2] = coverage[j,2] + 1/nsim
}
}
}
return(coverage)
}
#
# poisson_simulation_subsets6 <- function(nsim, lambda, nregions, alpha, R = 99) {
#   r <- seq(0.0, 0.14, 0.01)
#   K_actual <- rep(c(pi),each=15) * r * r
#   cover <- rep(c(0),each=15)
#   coverage <- cbind(r, cover)
#   for (i in 1:nsim) {
#     print(paste0("Current simulation:",i))
#     data <- rpoispp(lambda)
#     confidences <- subsets_method6(data, nregions, alpha, R=R)
#     for (j in 1:length(r)) {
#       if (confidences[j,1] <= K_actual[j] & K_actual[j] <= confidences[j,2]) {
#         coverage[j,2] = coverage[j,2] + 1/nsim
#       }
#     }
#   }
#   return(coverage)
# }
#
# poisson_simulation_subsets7 <- function(nsim, lambda, nregions, alpha, R = 99) {
#   r <- seq(0.0, 0.14, 0.01)
#   K_actual <- rep(c(pi),each=15) * r * r
#   cover <- rep(c(0),each=15)
#   coverage <- cbind(r, cover)
#   for (i in 1:nsim) {
#     print(paste0("Current simulation:",i))
#     data <- rpoispp(lambda)
#     confidences <- subsets_method7(data, nregions, alpha, R=R)
#     for (j in 1:length(r)) {
#       if (confidences[j,1] <= K_actual[j] & K_actual[j] <= confidences[j,2]) {
#         coverage[j,2] = coverage[j,2] + 1/nsim
#       }
#     }
#   }
#   return(coverage)
# }
# poisson_simulation_marked_point <- function(nsim, lambda, nregions, alpha, R = 99) {
# r <- seq(0.0, 0.14, 0.01)
#   K_actual <- rep(c(pi),each=15) * r * r
#   cover <- rep(c(0),each=15)
#   coverage <- cbind(r, cover)
#   for (i in 1:nsim) {
#     print(paste0("Current simulation:",i))
#     data <- rpoispp(lambda)
#     confidences <- marked_point_method(data, nregions, alpha, R)
#     for (j in 1:length(r)) {
#       if (confidences[j,1] <= K_actual[j] & K_actual[j] <= confidences[j,2]) {
#         coverage[j,2] = coverage[j,2] + 1/nsim
#       }
#     }
#   }
#   return(coverage)
# }
poisson_simulation_marked_point2 <- function(nsim, lambda, nregions, alpha, R = 99, inhomogenous=FALSE) {
r <- seq(0.0, 0.14, 0.01)
if (inhomogenous) {
K_actual <- K_actual_inhom()
} else {
K_actual <- rep(c(pi),each=15) * r * r
}
cover <- rep(c(0),each=15)
coverage <- cbind(r, cover)
for (i in 1:nsim) {
print(paste0("Current simulation:",i))
if (inhomogenous) {
data <- rpoispp(intensity2)
}else {
data <- rpoispp(lambda)
}
confidences <- marked_point_method2(data, nregions, alpha, R)
for (j in 1:length(r)) {
if (confidences[j,1] <= K_actual[j] & K_actual[j] <= confidences[j,2]) {
coverage[j,2] = coverage[j,2] + 1/nsim
}
}
}
return(coverage)
}
poisson_simulation_thinning <- function(nsim, lambda, thinning_param, alpha, R = 99) {
r <- seq(0.0, 0.14, 0.01)
K_actual <- rep(c(pi),each=15) * r * r
cover <- rep(c(0),each=15)
coverage <- cbind(r, cover)
for (i in 1:nsim) {
print(paste0("Current simulation:",i))
data <- rpoispp(lambda)
confidences <- thinning(data, thinning_param, alpha, R = R)
for (j in 1:length(r)) {
if (confidences[j,1] <= K_actual[j] & K_actual[j] <= confidences[j,2]) {
coverage[j,2] = coverage[j,2] + 1/nsim
}
}
}
return(coverage)
}
K_actual_inhom <- function() {
r <- seq(0.0, 0.14, 0.01)
k_vals <- data.frame(r)
for (i in 1:1000) {
sim <- rpoispp(intensity2)
k_vals <- cbind(k_vals, Kinhom(sim, lambda=intensity2, r = r, correction=c("isotropic"))$iso)
}
k_actual <- c()
for (radius in 1:length(r)) {
k_actual <- c(k_actual, mean(as.numeric(k_vals[radius,-1])))
}
return(k_actual)
}
poisson_simulation_thinning_sv <- function(nsim, lambda, thinning_param, alpha, R = 99, inhomogenous = FALSE) {
r <- seq(0.0, 0.14, 0.01)
if (inhomogenous) {
K_actual <- K_actual_inhom()
} else {
K_actual <- rep(c(pi),each=15) * r * r
}
cover <- rep(c(0),each=15)
coverage <- cbind(r, cover)
scaler <- scaling_constant_inhom(thinning_param,intensity=intensity2, mean=TRUE)
for (i in 1:nsim) {
tryCatch({print(paste0("Current simulation:",i))
if (inhomogenous) {
data <- rpoispp(intensity2)
}else {
data <- rpoispp(lambda)
}
confidences <- thinning_sample_var(data, thinning_param, alpha, R = R, inhomogenous = inhomogenous, scaler = scaler)
for (j in 1:length(r)) {
if (confidences[j,1] <= K_actual[j] & K_actual[j] <= confidences[j,2]) {
coverage[j,2] = coverage[j,2] + 1/nsim
}
}}, warning = function(w) { print("A simulation didn't work! Maybe a block is empty?") })
}
return(coverage)
}
# poisson_simulation_thinning_L <- function(nsim, lambda, thinning_param, alpha, R = 99, inhomogenous = FALSE) {
#   r <- seq(0.0, 0.14, 0.01)
#   if (inhomogenous) {
#     L_actual <- sqrt(K_actual_inhom()/pi)
#   } else {
#     L_actual <- sqrt((rep(c(pi),each=15) * r * r) / pi)
#   }
#   cover <- rep(c(0),each=15)
#   coverage <- cbind(r, cover)
#
#   scaler <- scaling_constant_inhom(thinning_param,intensity=intensity2, mean=TRUE)
#
#   for (i in 1:nsim) {
#     print(paste0("Current simulation:",i))
#     if (inhomogenous) {
#       data <- rpoispp(intensity2)
#     }else {
#       data <- rpoispp(lambda)
#     }
#     confidences <- thinning_sample_var(data, thinning_param, alpha, R = R, inhomogenous = inhomogenous, scaler = scaler)
#     confidences_L <- sqrt(confidences/pi)
#     for (j in 1:length(r)) {
#       if (confidences_L[j,1] <= L_actual[j] & L_actual[j] <= confidences_L[j,2]) {
#         coverage[j,2] = coverage[j,2] + 1/nsim
#       }
#     }
#   }
#   return(coverage)
# }
thinning_sv_03_inhom <- poisson_simulation_thinning_sv(100, 250, 0.3, 0.05, inhomogenous = TRUE)
plot(thinning_sv_09_inhom[-1,], ylim=c(0,1), type="l", col=1, main="Inhomogenous Poisson: Thinning (using Loh bootstrapping, N=16)")
lines(thinning_sv_08_inhom[-1,], type="l", col=2)
lines(thinning_sv_07_inhom[-1,], type="l", col=3)
lines(thinning_sv_06_inhom[-1,], type="l", col=4)
lines(thinning_sv_05_inhom[-1,], type="l", col=5)
lines(thinning_sv_04_inhom[-1,], type="l", col=6)
lines(thinning_sv_03_inhom[-1,], type="l", col=7)
lines(thinning_sv_02_inhom[-1,], type="l", col=8)
lines(thinning_sv_01_inhom[-1,], type="l", col=9)
legend(0.01, 0.4, legend=c("0.1", " 0.2", "0.3","0.4","0.5", "0.6", "0.7", "0.8", "0.9"),
col=c(9,8,7,6,5,4,3,2,1), lty =1, cex=0.7)
abline(h = 0.95, col=1, lty=2)
